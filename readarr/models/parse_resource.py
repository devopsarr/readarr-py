# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from readarr.models.author_resource import AuthorResource
from readarr.models.book_resource import BookResource
from readarr.models.parsed_book_info import ParsedBookInfo
from typing import Optional, Set
from typing_extensions import Self

class ParseResource(BaseModel):
    """
    ParseResource
    """ # noqa: E501
    id: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    parsed_book_info: Optional[ParsedBookInfo] = Field(default=None, alias="parsedBookInfo")
    author: Optional[AuthorResource] = None
    books: Optional[List[BookResource]] = None
    __properties: ClassVar[List[str]] = ["id", "title", "parsedBookInfo", "author", "books"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParseResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parsed_book_info
        if self.parsed_book_info:
            _dict['parsedBookInfo'] = self.parsed_book_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in books (list)
        _items = []
        if self.books:
            for _item_books in self.books:
                if _item_books:
                    _items.append(_item_books.to_dict())
            _dict['books'] = _items
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if books (nullable) is None
        # and model_fields_set contains the field
        if self.books is None and "books" in self.model_fields_set:
            _dict['books'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParseResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "parsedBookInfo": ParsedBookInfo.from_dict(obj["parsedBookInfo"]) if obj.get("parsedBookInfo") is not None else None,
            "author": AuthorResource.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "books": [BookResource.from_dict(_item) for _item in obj["books"]] if obj.get("books") is not None else None
        })
        return _obj


