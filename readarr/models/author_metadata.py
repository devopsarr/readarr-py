# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from readarr.models.author_status_type import AuthorStatusType
from readarr.models.links import Links
from readarr.models.media_cover import MediaCover
from readarr.models.ratings import Ratings
from typing import Optional, Set
from typing_extensions import Self

class AuthorMetadata(BaseModel):
    """
    AuthorMetadata
    """ # noqa: E501
    id: Optional[StrictInt] = None
    foreign_author_id: Optional[StrictStr] = Field(default=None, alias="foreignAuthorId")
    title_slug: Optional[StrictStr] = Field(default=None, alias="titleSlug")
    name: Optional[StrictStr] = None
    sort_name: Optional[StrictStr] = Field(default=None, alias="sortName")
    name_last_first: Optional[StrictStr] = Field(default=None, alias="nameLastFirst")
    sort_name_last_first: Optional[StrictStr] = Field(default=None, alias="sortNameLastFirst")
    aliases: Optional[List[StrictStr]] = None
    overview: Optional[StrictStr] = None
    disambiguation: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    hometown: Optional[StrictStr] = None
    born: Optional[datetime] = None
    died: Optional[datetime] = None
    status: Optional[AuthorStatusType] = None
    images: Optional[List[MediaCover]] = None
    links: Optional[List[Links]] = None
    genres: Optional[List[StrictStr]] = None
    ratings: Optional[Ratings] = None
    __properties: ClassVar[List[str]] = ["id", "foreignAuthorId", "titleSlug", "name", "sortName", "nameLastFirst", "sortNameLastFirst", "aliases", "overview", "disambiguation", "gender", "hometown", "born", "died", "status", "images", "links", "genres", "ratings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        # set to None if foreign_author_id (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_author_id is None and "foreign_author_id" in self.model_fields_set:
            _dict['foreignAuthorId'] = None

        # set to None if title_slug (nullable) is None
        # and model_fields_set contains the field
        if self.title_slug is None and "title_slug" in self.model_fields_set:
            _dict['titleSlug'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if sort_name (nullable) is None
        # and model_fields_set contains the field
        if self.sort_name is None and "sort_name" in self.model_fields_set:
            _dict['sortName'] = None

        # set to None if name_last_first (nullable) is None
        # and model_fields_set contains the field
        if self.name_last_first is None and "name_last_first" in self.model_fields_set:
            _dict['nameLastFirst'] = None

        # set to None if sort_name_last_first (nullable) is None
        # and model_fields_set contains the field
        if self.sort_name_last_first is None and "sort_name_last_first" in self.model_fields_set:
            _dict['sortNameLastFirst'] = None

        # set to None if aliases (nullable) is None
        # and model_fields_set contains the field
        if self.aliases is None and "aliases" in self.model_fields_set:
            _dict['aliases'] = None

        # set to None if overview (nullable) is None
        # and model_fields_set contains the field
        if self.overview is None and "overview" in self.model_fields_set:
            _dict['overview'] = None

        # set to None if disambiguation (nullable) is None
        # and model_fields_set contains the field
        if self.disambiguation is None and "disambiguation" in self.model_fields_set:
            _dict['disambiguation'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if hometown (nullable) is None
        # and model_fields_set contains the field
        if self.hometown is None and "hometown" in self.model_fields_set:
            _dict['hometown'] = None

        # set to None if born (nullable) is None
        # and model_fields_set contains the field
        if self.born is None and "born" in self.model_fields_set:
            _dict['born'] = None

        # set to None if died (nullable) is None
        # and model_fields_set contains the field
        if self.died is None and "died" in self.model_fields_set:
            _dict['died'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if genres (nullable) is None
        # and model_fields_set contains the field
        if self.genres is None and "genres" in self.model_fields_set:
            _dict['genres'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "foreignAuthorId": obj.get("foreignAuthorId"),
            "titleSlug": obj.get("titleSlug"),
            "name": obj.get("name"),
            "sortName": obj.get("sortName"),
            "nameLastFirst": obj.get("nameLastFirst"),
            "sortNameLastFirst": obj.get("sortNameLastFirst"),
            "aliases": obj.get("aliases"),
            "overview": obj.get("overview"),
            "disambiguation": obj.get("disambiguation"),
            "gender": obj.get("gender"),
            "hometown": obj.get("hometown"),
            "born": obj.get("born"),
            "died": obj.get("died"),
            "status": obj.get("status"),
            "images": [MediaCover.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "links": [Links.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "genres": obj.get("genres"),
            "ratings": Ratings.from_dict(obj["ratings"]) if obj.get("ratings") is not None else None
        })
        return _obj


