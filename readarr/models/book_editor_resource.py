# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BookEditorResource(BaseModel):
    """
    BookEditorResource
    """ # noqa: E501
    book_ids: Optional[List[StrictInt]] = Field(default=None, alias="bookIds")
    monitored: Optional[StrictBool] = None
    delete_files: Optional[StrictBool] = Field(default=None, alias="deleteFiles")
    add_import_list_exclusion: Optional[StrictBool] = Field(default=None, alias="addImportListExclusion")
    __properties: ClassVar[List[str]] = ["bookIds", "monitored", "deleteFiles", "addImportListExclusion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BookEditorResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if book_ids (nullable) is None
        # and model_fields_set contains the field
        if self.book_ids is None and "book_ids" in self.model_fields_set:
            _dict['bookIds'] = None

        # set to None if monitored (nullable) is None
        # and model_fields_set contains the field
        if self.monitored is None and "monitored" in self.model_fields_set:
            _dict['monitored'] = None

        # set to None if delete_files (nullable) is None
        # and model_fields_set contains the field
        if self.delete_files is None and "delete_files" in self.model_fields_set:
            _dict['deleteFiles'] = None

        # set to None if add_import_list_exclusion (nullable) is None
        # and model_fields_set contains the field
        if self.add_import_list_exclusion is None and "add_import_list_exclusion" in self.model_fields_set:
            _dict['addImportListExclusion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BookEditorResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bookIds": obj.get("bookIds"),
            "monitored": obj.get("monitored"),
            "deleteFiles": obj.get("deleteFiles"),
            "addImportListExclusion": obj.get("addImportListExclusion")
        })
        return _obj


