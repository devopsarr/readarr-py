# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, Optional
from readarr.models.write_audio_tags_type import WriteAudioTagsType
from readarr.models.write_book_tags_type import WriteBookTagsType
from typing import Optional, Set
from typing_extensions import Self

class MetadataProviderConfigResource(BaseModel):
    """
    MetadataProviderConfigResource
    """ # noqa: E501
    id: Optional[StrictInt] = None
    write_audio_tags: Optional[WriteAudioTagsType] = Field(default=None, alias="writeAudioTags")
    scrub_audio_tags: Optional[StrictBool] = Field(default=None, alias="scrubAudioTags")
    write_book_tags: Optional[WriteBookTagsType] = Field(default=None, alias="writeBookTags")
    update_covers: Optional[StrictBool] = Field(default=None, alias="updateCovers")
    embed_metadata: Optional[StrictBool] = Field(default=None, alias="embedMetadata")
    __properties: ClassVar[List[str]] = ["id", "writeAudioTags", "scrubAudioTags", "writeBookTags", "updateCovers", "embedMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataProviderConfigResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataProviderConfigResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "writeAudioTags": obj.get("writeAudioTags"),
            "scrubAudioTags": obj.get("scrubAudioTags"),
            "writeBookTags": obj.get("writeBookTags"),
            "updateCovers": obj.get("updateCovers"),
            "embedMetadata": obj.get("embedMetadata")
        })
        return _obj


