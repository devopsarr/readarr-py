# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from readarr.models.add_author_options import AddAuthorOptions
from readarr.models.author_metadata_lazy_loaded import AuthorMetadataLazyLoaded
from readarr.models.metadata_profile_lazy_loaded import MetadataProfileLazyLoaded
from readarr.models.new_item_monitor_types import NewItemMonitorTypes
from readarr.models.quality_profile_lazy_loaded import QualityProfileLazyLoaded
from typing import Optional, Set
from typing_extensions import Self

class Author(BaseModel):
    """
    Author
    """ # noqa: E501
    id: Optional[StrictInt] = None
    author_metadata_id: Optional[StrictInt] = Field(default=None, alias="authorMetadataId")
    clean_name: Optional[StrictStr] = Field(default=None, alias="cleanName")
    monitored: Optional[StrictBool] = None
    monitor_new_items: Optional[NewItemMonitorTypes] = Field(default=None, alias="monitorNewItems")
    last_info_sync: Optional[datetime] = Field(default=None, alias="lastInfoSync")
    path: Optional[StrictStr] = None
    root_folder_path: Optional[StrictStr] = Field(default=None, alias="rootFolderPath")
    added: Optional[datetime] = None
    quality_profile_id: Optional[StrictInt] = Field(default=None, alias="qualityProfileId")
    metadata_profile_id: Optional[StrictInt] = Field(default=None, alias="metadataProfileId")
    tags: Optional[List[StrictInt]] = None
    add_options: Optional[AddAuthorOptions] = Field(default=None, alias="addOptions")
    metadata: Optional[AuthorMetadataLazyLoaded] = None
    quality_profile: Optional[QualityProfileLazyLoaded] = Field(default=None, alias="qualityProfile")
    metadata_profile: Optional[MetadataProfileLazyLoaded] = Field(default=None, alias="metadataProfile")
    books: Optional[BookListLazyLoaded] = None
    series: Optional[SeriesListLazyLoaded] = None
    name: Optional[StrictStr] = None
    foreign_author_id: Optional[StrictStr] = Field(default=None, alias="foreignAuthorId")
    __properties: ClassVar[List[str]] = ["id", "authorMetadataId", "cleanName", "monitored", "monitorNewItems", "lastInfoSync", "path", "rootFolderPath", "added", "qualityProfileId", "metadataProfileId", "tags", "addOptions", "metadata", "qualityProfile", "metadataProfile", "books", "series", "name", "foreignAuthorId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Author from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_options
        if self.add_options:
            _dict['addOptions'] = self.add_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quality_profile
        if self.quality_profile:
            _dict['qualityProfile'] = self.quality_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_profile
        if self.metadata_profile:
            _dict['metadataProfile'] = self.metadata_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of books
        if self.books:
            _dict['books'] = self.books.to_dict()
        # override the default output from pydantic by calling `to_dict()` of series
        if self.series:
            _dict['series'] = self.series.to_dict()
        # set to None if clean_name (nullable) is None
        # and model_fields_set contains the field
        if self.clean_name is None and "clean_name" in self.model_fields_set:
            _dict['cleanName'] = None

        # set to None if last_info_sync (nullable) is None
        # and model_fields_set contains the field
        if self.last_info_sync is None and "last_info_sync" in self.model_fields_set:
            _dict['lastInfoSync'] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        # set to None if root_folder_path (nullable) is None
        # and model_fields_set contains the field
        if self.root_folder_path is None and "root_folder_path" in self.model_fields_set:
            _dict['rootFolderPath'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if foreign_author_id (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_author_id is None and "foreign_author_id" in self.model_fields_set:
            _dict['foreignAuthorId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Author from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "authorMetadataId": obj.get("authorMetadataId"),
            "cleanName": obj.get("cleanName"),
            "monitored": obj.get("monitored"),
            "monitorNewItems": obj.get("monitorNewItems"),
            "lastInfoSync": obj.get("lastInfoSync"),
            "path": obj.get("path"),
            "rootFolderPath": obj.get("rootFolderPath"),
            "added": obj.get("added"),
            "qualityProfileId": obj.get("qualityProfileId"),
            "metadataProfileId": obj.get("metadataProfileId"),
            "tags": obj.get("tags"),
            "addOptions": AddAuthorOptions.from_dict(obj["addOptions"]) if obj.get("addOptions") is not None else None,
            "metadata": AuthorMetadataLazyLoaded.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "qualityProfile": QualityProfileLazyLoaded.from_dict(obj["qualityProfile"]) if obj.get("qualityProfile") is not None else None,
            "metadataProfile": MetadataProfileLazyLoaded.from_dict(obj["metadataProfile"]) if obj.get("metadataProfile") is not None else None,
            "books": BookListLazyLoaded.from_dict(obj["books"]) if obj.get("books") is not None else None,
            "series": SeriesListLazyLoaded.from_dict(obj["series"]) if obj.get("series") is not None else None,
            "name": obj.get("name"),
            "foreignAuthorId": obj.get("foreignAuthorId")
        })
        return _obj

from readarr.models.book_list_lazy_loaded import BookListLazyLoaded
from readarr.models.series_list_lazy_loaded import SeriesListLazyLoaded
# TODO: Rewrite to not use raise_errors
Author.model_rebuild(raise_errors=False)

