# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from readarr.models.indexer_flags import IndexerFlags
from readarr.models.media_info_model import MediaInfoModel
from readarr.models.quality_model import QualityModel
from typing import Optional, Set
from typing_extensions import Self

class BookFile(BaseModel):
    """
    BookFile
    """ # noqa: E501
    id: Optional[StrictInt] = None
    path: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    modified: Optional[datetime] = None
    date_added: Optional[datetime] = Field(default=None, alias="dateAdded")
    original_file_path: Optional[StrictStr] = Field(default=None, alias="originalFilePath")
    scene_name: Optional[StrictStr] = Field(default=None, alias="sceneName")
    release_group: Optional[StrictStr] = Field(default=None, alias="releaseGroup")
    quality: Optional[QualityModel] = None
    indexer_flags: Optional[IndexerFlags] = Field(default=None, alias="indexerFlags")
    media_info: Optional[MediaInfoModel] = Field(default=None, alias="mediaInfo")
    edition_id: Optional[StrictInt] = Field(default=None, alias="editionId")
    calibre_id: Optional[StrictInt] = Field(default=None, alias="calibreId")
    part: Optional[StrictInt] = None
    author: Optional[AuthorLazyLoaded] = None
    edition: Optional[EditionLazyLoaded] = None
    part_count: Optional[StrictInt] = Field(default=None, alias="partCount")
    __properties: ClassVar[List[str]] = ["id", "path", "size", "modified", "dateAdded", "originalFilePath", "sceneName", "releaseGroup", "quality", "indexerFlags", "mediaInfo", "editionId", "calibreId", "part", "author", "edition", "partCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BookFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quality
        if self.quality:
            _dict['quality'] = self.quality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media_info
        if self.media_info:
            _dict['mediaInfo'] = self.media_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of edition
        if self.edition:
            _dict['edition'] = self.edition.to_dict()
        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        # set to None if original_file_path (nullable) is None
        # and model_fields_set contains the field
        if self.original_file_path is None and "original_file_path" in self.model_fields_set:
            _dict['originalFilePath'] = None

        # set to None if scene_name (nullable) is None
        # and model_fields_set contains the field
        if self.scene_name is None and "scene_name" in self.model_fields_set:
            _dict['sceneName'] = None

        # set to None if release_group (nullable) is None
        # and model_fields_set contains the field
        if self.release_group is None and "release_group" in self.model_fields_set:
            _dict['releaseGroup'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BookFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "path": obj.get("path"),
            "size": obj.get("size"),
            "modified": obj.get("modified"),
            "dateAdded": obj.get("dateAdded"),
            "originalFilePath": obj.get("originalFilePath"),
            "sceneName": obj.get("sceneName"),
            "releaseGroup": obj.get("releaseGroup"),
            "quality": QualityModel.from_dict(obj["quality"]) if obj.get("quality") is not None else None,
            "indexerFlags": obj.get("indexerFlags"),
            "mediaInfo": MediaInfoModel.from_dict(obj["mediaInfo"]) if obj.get("mediaInfo") is not None else None,
            "editionId": obj.get("editionId"),
            "calibreId": obj.get("calibreId"),
            "part": obj.get("part"),
            "author": AuthorLazyLoaded.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "edition": EditionLazyLoaded.from_dict(obj["edition"]) if obj.get("edition") is not None else None,
            "partCount": obj.get("partCount")
        })
        return _obj

from readarr.models.author_lazy_loaded import AuthorLazyLoaded
from readarr.models.edition_lazy_loaded import EditionLazyLoaded
# TODO: Rewrite to not use raise_errors
BookFile.model_rebuild(raise_errors=False)

