# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class Series(BaseModel):
    """
    Series
    """ # noqa: E501
    id: Optional[StrictInt] = None
    foreign_series_id: Optional[StrictStr] = Field(default=None, alias="foreignSeriesId")
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    numbered: Optional[StrictBool] = None
    work_count: Optional[StrictInt] = Field(default=None, alias="workCount")
    primary_work_count: Optional[StrictInt] = Field(default=None, alias="primaryWorkCount")
    link_items: Optional[SeriesBookLinkListLazyLoaded] = Field(default=None, alias="linkItems")
    books: Optional[BookListLazyLoaded] = None
    foreign_author_id: Optional[StrictStr] = Field(default=None, alias="foreignAuthorId")
    __properties: ClassVar[List[str]] = ["id", "foreignSeriesId", "title", "description", "numbered", "workCount", "primaryWorkCount", "linkItems", "books", "foreignAuthorId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Series from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of link_items
        if self.link_items:
            _dict['linkItems'] = self.link_items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of books
        if self.books:
            _dict['books'] = self.books.to_dict()
        # set to None if foreign_series_id (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_series_id is None and "foreign_series_id" in self.model_fields_set:
            _dict['foreignSeriesId'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if foreign_author_id (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_author_id is None and "foreign_author_id" in self.model_fields_set:
            _dict['foreignAuthorId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Series from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "foreignSeriesId": obj.get("foreignSeriesId"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "numbered": obj.get("numbered"),
            "workCount": obj.get("workCount"),
            "primaryWorkCount": obj.get("primaryWorkCount"),
            "linkItems": SeriesBookLinkListLazyLoaded.from_dict(obj["linkItems"]) if obj.get("linkItems") is not None else None,
            "books": BookListLazyLoaded.from_dict(obj["books"]) if obj.get("books") is not None else None,
            "foreignAuthorId": obj.get("foreignAuthorId")
        })
        return _obj

from readarr.models.book_list_lazy_loaded import BookListLazyLoaded
from readarr.models.series_book_link_list_lazy_loaded import SeriesBookLinkListLazyLoaded
# TODO: Rewrite to not use raise_errors
Series.model_rebuild(raise_errors=False)

