# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from readarr.models.author_title_info import AuthorTitleInfo
from readarr.models.quality_model import QualityModel
from typing import Optional, Set
from typing_extensions import Self

class ParsedBookInfo(BaseModel):
    """
    ParsedBookInfo
    """ # noqa: E501
    book_title: Optional[StrictStr] = Field(default=None, alias="bookTitle")
    author_name: Optional[StrictStr] = Field(default=None, alias="authorName")
    author_title_info: Optional[AuthorTitleInfo] = Field(default=None, alias="authorTitleInfo")
    quality: Optional[QualityModel] = None
    release_date: Optional[StrictStr] = Field(default=None, alias="releaseDate")
    discography: Optional[StrictBool] = None
    discography_start: Optional[StrictInt] = Field(default=None, alias="discographyStart")
    discography_end: Optional[StrictInt] = Field(default=None, alias="discographyEnd")
    release_group: Optional[StrictStr] = Field(default=None, alias="releaseGroup")
    release_hash: Optional[StrictStr] = Field(default=None, alias="releaseHash")
    release_version: Optional[StrictStr] = Field(default=None, alias="releaseVersion")
    release_title: Optional[StrictStr] = Field(default=None, alias="releaseTitle")
    __properties: ClassVar[List[str]] = ["bookTitle", "authorName", "authorTitleInfo", "quality", "releaseDate", "discography", "discographyStart", "discographyEnd", "releaseGroup", "releaseHash", "releaseVersion", "releaseTitle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParsedBookInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author_title_info
        if self.author_title_info:
            _dict['authorTitleInfo'] = self.author_title_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quality
        if self.quality:
            _dict['quality'] = self.quality.to_dict()
        # set to None if book_title (nullable) is None
        # and model_fields_set contains the field
        if self.book_title is None and "book_title" in self.model_fields_set:
            _dict['bookTitle'] = None

        # set to None if author_name (nullable) is None
        # and model_fields_set contains the field
        if self.author_name is None and "author_name" in self.model_fields_set:
            _dict['authorName'] = None

        # set to None if release_date (nullable) is None
        # and model_fields_set contains the field
        if self.release_date is None and "release_date" in self.model_fields_set:
            _dict['releaseDate'] = None

        # set to None if release_group (nullable) is None
        # and model_fields_set contains the field
        if self.release_group is None and "release_group" in self.model_fields_set:
            _dict['releaseGroup'] = None

        # set to None if release_hash (nullable) is None
        # and model_fields_set contains the field
        if self.release_hash is None and "release_hash" in self.model_fields_set:
            _dict['releaseHash'] = None

        # set to None if release_version (nullable) is None
        # and model_fields_set contains the field
        if self.release_version is None and "release_version" in self.model_fields_set:
            _dict['releaseVersion'] = None

        # set to None if release_title (nullable) is None
        # and model_fields_set contains the field
        if self.release_title is None and "release_title" in self.model_fields_set:
            _dict['releaseTitle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParsedBookInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bookTitle": obj.get("bookTitle"),
            "authorName": obj.get("authorName"),
            "authorTitleInfo": AuthorTitleInfo.from_dict(obj["authorTitleInfo"]) if obj.get("authorTitleInfo") is not None else None,
            "quality": QualityModel.from_dict(obj["quality"]) if obj.get("quality") is not None else None,
            "releaseDate": obj.get("releaseDate"),
            "discography": obj.get("discography"),
            "discographyStart": obj.get("discographyStart"),
            "discographyEnd": obj.get("discographyEnd"),
            "releaseGroup": obj.get("releaseGroup"),
            "releaseHash": obj.get("releaseHash"),
            "releaseVersion": obj.get("releaseVersion"),
            "releaseTitle": obj.get("releaseTitle")
        })
        return _obj


