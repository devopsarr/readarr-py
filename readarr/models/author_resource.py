# coding: utf-8

"""
    Readarr

    Readarr API docs

    The version of the OpenAPI document: v0.4.10.2734
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from readarr.models.add_author_options import AddAuthorOptions
from readarr.models.author_statistics_resource import AuthorStatisticsResource
from readarr.models.author_status_type import AuthorStatusType
from readarr.models.book import Book
from readarr.models.links import Links
from readarr.models.media_cover import MediaCover
from readarr.models.new_item_monitor_types import NewItemMonitorTypes
from readarr.models.ratings import Ratings
from typing import Optional, Set
from typing_extensions import Self

class AuthorResource(BaseModel):
    """
    AuthorResource
    """ # noqa: E501
    id: Optional[StrictInt] = None
    author_metadata_id: Optional[StrictInt] = Field(default=None, alias="authorMetadataId")
    status: Optional[AuthorStatusType] = None
    ended: Optional[StrictBool] = None
    author_name: Optional[StrictStr] = Field(default=None, alias="authorName")
    author_name_last_first: Optional[StrictStr] = Field(default=None, alias="authorNameLastFirst")
    foreign_author_id: Optional[StrictStr] = Field(default=None, alias="foreignAuthorId")
    title_slug: Optional[StrictStr] = Field(default=None, alias="titleSlug")
    overview: Optional[StrictStr] = None
    disambiguation: Optional[StrictStr] = None
    links: Optional[List[Links]] = None
    next_book: Optional[Book] = Field(default=None, alias="nextBook")
    last_book: Optional[Book] = Field(default=None, alias="lastBook")
    images: Optional[List[MediaCover]] = None
    remote_poster: Optional[StrictStr] = Field(default=None, alias="remotePoster")
    path: Optional[StrictStr] = None
    quality_profile_id: Optional[StrictInt] = Field(default=None, alias="qualityProfileId")
    metadata_profile_id: Optional[StrictInt] = Field(default=None, alias="metadataProfileId")
    monitored: Optional[StrictBool] = None
    monitor_new_items: Optional[NewItemMonitorTypes] = Field(default=None, alias="monitorNewItems")
    root_folder_path: Optional[StrictStr] = Field(default=None, alias="rootFolderPath")
    genres: Optional[List[StrictStr]] = None
    clean_name: Optional[StrictStr] = Field(default=None, alias="cleanName")
    sort_name: Optional[StrictStr] = Field(default=None, alias="sortName")
    sort_name_last_first: Optional[StrictStr] = Field(default=None, alias="sortNameLastFirst")
    tags: Optional[List[StrictInt]] = None
    added: Optional[datetime] = None
    add_options: Optional[AddAuthorOptions] = Field(default=None, alias="addOptions")
    ratings: Optional[Ratings] = None
    statistics: Optional[AuthorStatisticsResource] = None
    __properties: ClassVar[List[str]] = ["id", "authorMetadataId", "status", "ended", "authorName", "authorNameLastFirst", "foreignAuthorId", "titleSlug", "overview", "disambiguation", "links", "nextBook", "lastBook", "images", "remotePoster", "path", "qualityProfileId", "metadataProfileId", "monitored", "monitorNewItems", "rootFolderPath", "genres", "cleanName", "sortName", "sortNameLastFirst", "tags", "added", "addOptions", "ratings", "statistics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ended",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of next_book
        if self.next_book:
            _dict['nextBook'] = self.next_book.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_book
        if self.last_book:
            _dict['lastBook'] = self.last_book.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of add_options
        if self.add_options:
            _dict['addOptions'] = self.add_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # set to None if author_name (nullable) is None
        # and model_fields_set contains the field
        if self.author_name is None and "author_name" in self.model_fields_set:
            _dict['authorName'] = None

        # set to None if author_name_last_first (nullable) is None
        # and model_fields_set contains the field
        if self.author_name_last_first is None and "author_name_last_first" in self.model_fields_set:
            _dict['authorNameLastFirst'] = None

        # set to None if foreign_author_id (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_author_id is None and "foreign_author_id" in self.model_fields_set:
            _dict['foreignAuthorId'] = None

        # set to None if title_slug (nullable) is None
        # and model_fields_set contains the field
        if self.title_slug is None and "title_slug" in self.model_fields_set:
            _dict['titleSlug'] = None

        # set to None if overview (nullable) is None
        # and model_fields_set contains the field
        if self.overview is None and "overview" in self.model_fields_set:
            _dict['overview'] = None

        # set to None if disambiguation (nullable) is None
        # and model_fields_set contains the field
        if self.disambiguation is None and "disambiguation" in self.model_fields_set:
            _dict['disambiguation'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if remote_poster (nullable) is None
        # and model_fields_set contains the field
        if self.remote_poster is None and "remote_poster" in self.model_fields_set:
            _dict['remotePoster'] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        # set to None if root_folder_path (nullable) is None
        # and model_fields_set contains the field
        if self.root_folder_path is None and "root_folder_path" in self.model_fields_set:
            _dict['rootFolderPath'] = None

        # set to None if genres (nullable) is None
        # and model_fields_set contains the field
        if self.genres is None and "genres" in self.model_fields_set:
            _dict['genres'] = None

        # set to None if clean_name (nullable) is None
        # and model_fields_set contains the field
        if self.clean_name is None and "clean_name" in self.model_fields_set:
            _dict['cleanName'] = None

        # set to None if sort_name (nullable) is None
        # and model_fields_set contains the field
        if self.sort_name is None and "sort_name" in self.model_fields_set:
            _dict['sortName'] = None

        # set to None if sort_name_last_first (nullable) is None
        # and model_fields_set contains the field
        if self.sort_name_last_first is None and "sort_name_last_first" in self.model_fields_set:
            _dict['sortNameLastFirst'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "authorMetadataId": obj.get("authorMetadataId"),
            "status": obj.get("status"),
            "ended": obj.get("ended"),
            "authorName": obj.get("authorName"),
            "authorNameLastFirst": obj.get("authorNameLastFirst"),
            "foreignAuthorId": obj.get("foreignAuthorId"),
            "titleSlug": obj.get("titleSlug"),
            "overview": obj.get("overview"),
            "disambiguation": obj.get("disambiguation"),
            "links": [Links.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "nextBook": Book.from_dict(obj["nextBook"]) if obj.get("nextBook") is not None else None,
            "lastBook": Book.from_dict(obj["lastBook"]) if obj.get("lastBook") is not None else None,
            "images": [MediaCover.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "remotePoster": obj.get("remotePoster"),
            "path": obj.get("path"),
            "qualityProfileId": obj.get("qualityProfileId"),
            "metadataProfileId": obj.get("metadataProfileId"),
            "monitored": obj.get("monitored"),
            "monitorNewItems": obj.get("monitorNewItems"),
            "rootFolderPath": obj.get("rootFolderPath"),
            "genres": obj.get("genres"),
            "cleanName": obj.get("cleanName"),
            "sortName": obj.get("sortName"),
            "sortNameLastFirst": obj.get("sortNameLastFirst"),
            "tags": obj.get("tags"),
            "added": obj.get("added"),
            "addOptions": AddAuthorOptions.from_dict(obj["addOptions"]) if obj.get("addOptions") is not None else None,
            "ratings": Ratings.from_dict(obj["ratings"]) if obj.get("ratings") is not None else None,
            "statistics": AuthorStatisticsResource.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None
        })
        return _obj


